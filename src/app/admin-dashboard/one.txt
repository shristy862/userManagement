"use client";
import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Alert } from 'antd';
import './style.css'; // Ensure this import points to your CSS file

const AddCompanyForm = () => {
  const [companyDetails, setCompanyDetails] = useState({
    companyName: '',
    registrationNo: '',
    gstNo: '',
    companyId: '',
    contactNo: '',
    location: '',
    representative: '',
    email: '',
    password: '',
  });

  const [loading, setLoading] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const router = useRouter();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCompanyDetails((prevDetails) => ({
      ...prevDetails,
      [name]: value,
    }));
  };

  const addCompany = async (e) => {
    e.preventDefault(); // Prevent form submission from reloading the page
    setLoading(true); // Set loading state to true to indicate the process started
  
    const token = localStorage.getItem('token'); // Retrieve the token from localStorage
  
    if (!token) {
      router.push('/login'); // Redirect to login if no token found
      return;
    }
  
    try {
      const response = await fetch('https://admin-4-hoom.onrender.com/api/auth/addcompany', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`, // Include token in Authorization header
          'Content-Type': 'application/json', // Set the content type as JSON
        },
        body: JSON.stringify(companyDetails), // Send company details as JSON
      });
  
      // Log the response to the console for debugging purposes
      console.log('API Response:', response);
  
      // Check if the response status is OK (status code 200-299)
      if (response.ok) {
        const responseData = await response.json(); // Parse the response data
        console.log('Company added successfully:', responseData);
  
        // Now store the company details in IndexedDB
        await storeCompanyDetails(companyDetails); // Store in IndexedDB
  
        // Set success alert message and display it
        setAlertMessage('Company added successfully!');
        setShowAlert(true);
  
        // After 2 seconds, redirect to the login page
        setTimeout(() => {
          router.push('/login');
        }, 2000);
      } else {
        // Handle unsuccessful API response (e.g., 400 or 500 error)
        const errorData = await response.json(); // Parse error response data
        console.error('Error adding company:', errorData);
  
        // Set error alert message and display it
        setAlertMessage(errorData.message || 'Failed to add company. Please try again.');
        setShowAlert(true);
      }
    } catch (error) {
      // Handle any unexpected errors (e.g., network errors)
      console.error('Unexpected error adding company:', error.message);
  
      // Set alert message for unexpected errors and display it
      setAlertMessage('An unexpected error occurred. Please try again later.');
      setShowAlert(true);
    } finally {
      // Set loading state to false when request completes (either success or failure)
      setLoading(false);
    }
  };  
  

  return (
    <div className='container'>
      {showAlert && (
  <Alert
    message={alertMessage}
    type={alertMessage.includes('successfully') ? 'success' : 'error'} // Show success/error based on the message content
    showIcon
    closable
    onClose={() => setShowAlert(false)} // Allow closing the alert manually
    style={{ marginBottom: '16px' }}
  />
)}
      <form onSubmit={addCompany}>
        <input
          type="text"
          name="companyName"
          value={companyDetails.companyName}
          onChange={handleInputChange}
          placeholder="Company Name"
          required
        />
        <input
          type="text"
          name="registrationNo"
          value={companyDetails.registrationNo}
          onChange={handleInputChange}
          placeholder="Registration No"
          required
        />
        <input
          type="text"
          name="gstNo"
          value={companyDetails.gstNo}
          onChange={handleInputChange}
          placeholder="GST No"
          required
        />
        <input
          type="text"
          name="companyId"
          value={companyDetails.companyId}
          onChange={handleInputChange}
          placeholder="Company ID"
          required
        />
        <input
          type="text"
          name="contactNo"
          value={companyDetails.contactNo}
          onChange={handleInputChange}
          placeholder="Contact No"
          required
        />
        <input
          type="text"
          name="location"
          value={companyDetails.location}
          onChange={handleInputChange}
          placeholder="Location"
          required
        />
        <input
          type="text"
          name="representative"
          value={companyDetails.representative}
          onChange={handleInputChange}
          placeholder="Representative"
          required
        />
        <input
          type="email"
          name="email"
          value={companyDetails.email}
          onChange={handleInputChange}
          placeholder="Email"
          required
        />
        <input
          type="password"
          name="password"
          value={companyDetails.password}
          onChange={handleInputChange}
          placeholder="Password"
          required
        />
        <button type="submit" disabled={loading}>
          {loading ? 'Adding Company...' : 'Add Company'}
        </button>
      </form>
    </div>
  );
};

export default AddCompanyForm;
